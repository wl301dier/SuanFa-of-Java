/**
 * -----------------------------------
 * 面试经典150题--------88.合并两个有序数组（Merge two ordered arrays）
 * -----------------------------------
 *
 * 题目描述：
 * 给你两个按 非递减顺序 排列的整数数组nums1和nums2，另有两个整数m和n，分别表示nums1和nums2中的元素数目。
 * 请你 合并nums2到nums1中，使合并后的数组同样按非递减顺序排列。
 * 注意：最终，合并后数组不应由函数返回，而是存储在数组nums1中。为了应对这种情况，nums1的初始长度为m + n，
 * 其中前m个元素表示应合并的元素，后n个元素为0，应忽略。nums2的长度为 n 。
 *
 *  Description:
 *  You are given two integer arrays nums1 and nums2 in non-decreasing order, and two integers m and n representing the number of elements in nums1 and nums2, 
 * respectively.Please merge nums2 into nums1 so that the merged arrays are also in non-decreasing order.
 *  Note: Ultimately, the merged array should not be returned by the function, but stored in the array nums1. To cope with this, nums1 has an initial length of m + n,
 * where the first m elements represent the elements that should be merged, and the last n elements are 0 and should be ignored. The length of nums2 is n.
 *
 * 示例 1：
 * 输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
 * 输出：[1,2,2,3,5,6]
 * 解释：需要合并 [1,2,3] 和 [2,5,6] 。
 * 合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
 * 示例 2：
 * 输入：nums1 = [1], m = 1, nums2 = [], n = 0
 * 输出：[1]
 * 解释：需要合并 [1] 和 [] 。
 * 合并结果是 [1] 。
 * 示例 3：
 * 输入：nums1 = [0], m = 0, nums2 = [1], n = 1
 * 输出：[1]
 * 解释：需要合并的数组是 [] 和 [1] 。
 * 合并结果是 [1] 。
 * 注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。
 *
 * Example 1:
 * Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
 * Output: [1,2,2,3,5,6]
 * Explanation: [1,2,3] and [2,5,6] need to be merged.
 * The result of the merge is [1,2,2,3,5,6] where the elements in nums1 are bolded in italics.
 * Example 2:
 * Input: nums1 = [1], m = 1, nums2 = [], n = 0
 * Output: [1]
 * Explanation: [1] and [] need to be merged.
 * The result of the merge is [1] .
 * Example 3:
 * Input: nums1 = [0], m = 0, nums2 = [1], n = 1
 * Output: [1]
 * Explanation: The arrays that need to be merged are [] and [1].
 * The result of the merge is [1] .
 * Note that because m = 0, there are no elements in nums1.The only 0 left in nums1 is just to ensure that the merge results can be stored in nums1 without any problems.
 *
 * 提示：
 * nums1.length == m + n
 * nums2.length == n
 * 0 <= m, n <= 200
 * 1 <= m + n <= 200
 * -109 <= nums1[i], nums2[j] <= 109
 *
 * 运行该程序，输出结果为：
 *         合并后的数组: 1 2 2 3 5 6
 *
 * Prompt:
 * nums1.length == m + n
 * nums2.length == n
 * 0 <= m, n <= 200
 * 1 <= m + n <= 200
 * -109 <= nums1[i], nums2[j] <= 109
 *
 * Run the program and the output will be:
 *         Merged array: 1 2 2 3 5 6
 */

方法一（Example 1）
package arrays;

public class MergeSortedArray {//合并两个有序数组
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 = m - 1;     // nums1 数组的末尾指针
        int p2 = n - 1;     // nums2 数组的末尾指针
        int p = m + n - 1;  // merged 数组的末尾指针

        //将较大的元素放入 merged 数组的末尾，并移动对应的指针和合并数组的指针
        while (p1 >= 0 && p2 >= 0) {        //判断数组nums1和nums2是否为空数组
            if (nums1[p1] > nums2[p2]) {    //判断nums1是否大于nums2
                nums1[p] = nums1[p1];       //如果大于，将nums1中的元素放入合并数组中
                p1--;                       //nums1数组末尾指针左移
            } else {
                nums1[p] = nums2[p2];       //如果小于，将nums2中的元素放入合并的数组中
                p2--;                       //nums2的数组末尾指针左移
            }
            p--;                            //合并数组的末尾指针左移
        }

        //判断nums2数组是否已经合并完
        while (p2 >= 0) {
            nums1[p] = nums2[p2];           //将剩余的 nums2 元素依次放入 merged 数组中
            p2--;                           //nums2的数组末尾指针左移
            p--;                            //合并数组的末尾指针左移
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 0, 0, 0};   //声明并初始化nums1
        int[] nums2 = {2, 5, 6};            //声明并初始化nums2
        int m = 3;                          //数组nums1的元素个数m
        int n = 3;                          //数组nums2的元素个数n

        merge(nums1, m, nums2, n);          //合并数组的函数merge，含有4个参数，分别是nums1,m,nums2,n

        //遍历合并后的数组nums1并打印出来
        System.out.print("合并后的数组: ");
        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }
}

方法二（Example 2）
public class MergeSortedArray1 {
    private static void merge(int[] nums1, int m, int[] nums2, int n, int[] nums) {
        int p1 = 0;     //第一个数组的初始下标
        int p2 = 0;     //第二个数组的初始下标
        int p = 0;      //两个数组合并成新数组的初始下标

        //两个数组都不为空
        while(p1 < m && p2 < n){
            //nums1数组下标p1位置的值大于nums2数组下标p2位置的值
            if (nums1[p1]>nums2[p2]){
                //将nums2数组下标p2位置的值赋给nums新数组下标p位置的值
                nums[p] = nums2[p2];
                //nums2数组下标p2往后移一位
                p2++;
            }else {
                //nums1数组下标p1位置的值小于等于nums2数组下标p2位置的值
                nums[p] = nums1[p1];
                //nums1数组下标p1往后移一位
                p1++;
            }
            //两个数组每合并完成一次，nums新数组下标p就往后移一位
            p++;
        }

        //数组2为空
        while (p1 < m){
            //将nums1数组下标p1位置的值赋给nums新数组下标p位置的值
            nums[p] = nums1[p1];
            //nums1数组下标p1往后移一位
            p1++;
            //nums数组下标p往后移一位
            p++;
        }

        //数组1为空
        while (p2 < n){
            //将nums2数组下标p2位置的值赋给nums新数组下标p位置的值
            nums[p] = nums2[p2];
            //nums2数组下标p2往后移一位
            p2++;
            //nums数组下标p往后移一位
            p++;
        }
    }

方法三（Example 3）
private static void merge(int[] nums1, int m, int[] nums2, int n) {
        //数组的复制 arraycopy(源数组,源数组的起始下标,目标数组,目标数组的起始下标,要复制的元素个数)
        System.arraycopy(nums2, 0, nums1, 3, 3);
        //调用数组的排序方法sort()，对合并后的数组元素进行排序
        Arrays.sort(nums1);
}

方法四（Example 4）
private static void merge(int[] nums1, int m, int[] nums2, int n) {
        int[] nums = new int[m];
        System.arraycopy(nums1, 0, nums, 0, m);


        int p1 = 0; //设置指针p1,指向数组nums
        int p2 = 0; //设置指针p2,指向数组nums2
        int p = 0;  //设置指针p,指向数组nums1

        //比较指针p1和p2指向的数字，将较小数字存入到nums1后，指针后移，直到所有数字比较完毕
        while (p1 < m && p2 < n) {
            if(nums[p1] < nums2[p2]){
                  nums1[p] = nums[p1];
                  p1++;
              }else{
                  nums1[p] = nums2[p2];
                  p2++;
              }
              p++;
        }

        // 如果 nums 中还有剩余元素，拷贝到 nums1 的剩余位置
        if (p1 < m) {
            System.arraycopy(nums, p1, nums1, p, m - p1);
        }

        // 如果 nums2 中还有剩余元素，拷贝到 nums1 的剩余位置
        if (p2 < n) {
            System.arraycopy(nums2, p2, nums1, p, n - p2);
        }
    }
